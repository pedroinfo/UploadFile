@model MvcUploadFile.Models.Employee

@{
    ViewData["Title"] = "Edit";
}

<h4>Edit - Employee</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Edit" class="form-row">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="EmployeeId" />

            <div class="col-md-5">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="col-md-5">
                <label asp-for="Role" class="control-label"></label>
                <input asp-for="Role" class="form-control" />
                <span asp-validation-for="Role" class="text-danger"></span>
            </div>

            <div class="col-md-2">
                <label class="control-label">&nbsp;</label>
                <button type="submit" class="btn btn-primary btn-sm form-control">Save</button>
            </div>

        </form>
    </div>
    <hr />
</div>

<hr />

<div class="row mb-4">
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-6">
                <div class="custom-file">
                    <input type="file" class="custom-file-input" id="file-upload">
                    <label class="custom-file-label" for="inputGroupFile01">Choose file</label>
                </div>
            </div>
            <div class="col-md-2">
                <button type="button" id="btn-upload" class="btn btn-primary btn-sm form-control">Save with ajax</button>
            </div>
            <div class="col-md-4">
                <div class="progress mb-5" style="height: 20px; display:none" id="div-progresbar">
                    <div class="progress-bar" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
            </div>

        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        @if (Model.EmployeeAttachments != null && Model.EmployeeAttachments.Count > 0)
        {
            <table class="table table-striped table-bordered table-responsive-sm">
                <thead>
                    <tr>
                        <th scope="col">Filename</th>
                        <th scope="col">Size</th>
                        <th scope="col">File Type</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (EmployeeAttachment item in Model.EmployeeAttachments)
                    {
                        <tr id="@item.EmployeeAttachmentId">
                            <td>@item.AttachmentName</td>
                            <td>@item.ContentLenght</td>
                            <td>@item.ContentType</td>
                            <td>
                                <button type="button" name="btn-delete" class="btn btn-danger btn-sm">Delete</button>
                                <button type="button" name="btn-view" class="btn btn-primary btn-sm">View</button>
                                <button type="button" name="btn-download" class="btn btn-secondary btn-sm">Download</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-danger">
                There are no files attached
            </div>
        }
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {

    <script>

        $(document).on('change', '.custom-file-input', function (event) {
            $(this).next('.custom-file-label').html(event.target.files[0].name);
        })

        var employeeId = document.getElementById('EmployeeId').getAttribute('value');

        $('#btn-upload').on('click', function () {

            $('#div-progresbar').show();


            var formData = new FormData();
            formData.append('employeeId', employeeId);

            var fileUpload = $('#file-upload').get(0);
            var files = fileUpload.files;

            for (var i = 0; i < files.length; i++) {
                console.log(files[i].name);
                formData.append(files[i].name, files[i]);
            }
            $.ajax({
                url: '/Employees/SaveFileWithAjax',
                type: 'POST',
                data: formData,
                success: function (data) {
                    bootbox.alert({
                        message: "Upload finished",
                    });

                    setTimeout(function () {
                        window.location.reload();
                    }, 1000);

                },
                error: function (data) {
                    bootbox.alert({
                        message: "Error: " + data,
                    });
                },
                cache: false,
                contentType: false,
                processData: false,
                xhr: function () {
                    var xhr = new window.XMLHttpRequest();
                    xhr.upload.addEventListener("progress", function (evt) {
                        if (evt.lengthComputable) {
                            var percentComplete = Math.round((evt.loaded / evt.total) * 100);

                            $('.progress-bar').css('width', percentComplete + '%').attr('aria-valuenow', percentComplete);
                            $('.progress-bar').text(percentComplete + '%');
                            console.log(percentComplete);
                        }
                    }, false);
                    return xhr;
                },
            });
        });

        document.getElementsByName('btn-download').forEach((element) => {
            element.addEventListener('click', function () {
                var rowId = element.closest('tr').getAttribute('id');
                window.location = '/Employees/DownloadFile/' + rowId;
            });
        });

        document.getElementsByName('btn-delete').forEach((element) => {
            element.addEventListener('click', function (e) {
                e.preventDefault();

                var rowId = element.closest('tr').getAttribute('id');

                var dialog = bootbox.confirm({
                    title: "Delete file?",
                    message: "Do you want to delete this file?",
                    buttons: {
                        cancel: {
                            label: '<i class="fa fa-times"></i> Cancel',
                            className: 'btn-primary btn-sm'
                        },
                        confirm: {
                            label: '<i class="fa fa-check"></i> Confirm',
                            className: 'btn-danger btn-sm'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            $.ajax({
                                url: '/Employees/DeleteFile/' + rowId,
                                method: 'POST'
                            }).done(function (data, textStatus, jqXHR) {
                                setTimeout(function () {
                                    dialog.modal('hide');
                                    window.location.reload();
                                }, 500);
                            }).fail(function (jqXHR, textStatus, errorThrown) {
                                console.log(textStatus);
                            });
                        }
                        return false;
                    }
                });

            });
        });

        document.getElementsByName('btn-view').forEach((element) => {
            element.addEventListener('click', function () {
                var rowId = element.closest('tr').getAttribute('id');

                $.ajax({
                    url: '/Employees/ViewFile/' + rowId,
                    method: 'GET'
                }).done(function (data, textStatus, jqXHR) {

                    var mimeTypesAllowed = ['image/jpeg', 'image/png', 'image/gif', 'image/png', 'image/tiff'];

                    if (mimeTypesAllowed.indexOf(data.contentType) >= 0) {
                        bootbox.alert("Image<br/><img src='data:" + data.contentType + ";base64," + data.bytes + "'>",
                            function () {});
                    }
                    else {
                        bootbox.alert("mimetype is not allowed: " + data.contentType);
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    console.log(textStatus);
                });

                /*
                bootbox.alert("Do you like my image?<br/><img src='data:image/jpeg;base64', value=''>", function () {
                    console.log("It was awesome!");
                });
                */

            });
        });

    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
